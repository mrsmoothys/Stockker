#!/usr/bin/env python3
import os
import re
import glob
import pandas as pd
import numpy as np


def get_latest_value(df, account_substring):
    """
    Search the 'account' column for rows that contain the given substring (case insensitive), and return the sum of values in the latest period column.
    """
    mask = df['account'].str.contains(account_substring, case=False, na=False)
    if not mask.any():
        return np.nan
    matched = df[mask]
    # Consider all columns except 'account' and 'level' as period columns
    period_columns = [col for col in df.columns if col not in ['account', 'level']]
    if not period_columns:
        return np.nan
    # Assume the latest period is the rightmost column
    latest_period = period_columns[-1]
    return matched[latest_period].sum()


def load_sheet_from_csv(stock_name, sheet_name):
    """
    Load a CSV file for a given stock and sheet.
    Expected file name pattern: {stock_name}_{sheet_name_with_underscores}.csv
    """
    file_name = f"{stock_name}_{sheet_name.replace(' ', '_')}.csv"
    if not os.path.exists(file_name):
        return None
    try:
        df = pd.read_csv(file_name)
        return df
    except Exception as e:
        print(f"Error loading {file_name}: {e}")
        return None


def group_stock_csvs():
    """
    Group CSV files generated by the extractor by stock.
    Assumes file naming pattern: <stock>_<sheet>.csv
    Returns a dictionary: { stock_name: { sheet_name: file_name, ... }, ... }
    """
    csv_files = glob.glob("*.csv")
    stocks = {}
    # Mapping to recover original sheet names from file name fragments
    sheet_map = {
        "Bilanço": "Bilanço",
        "Gelir_Tablosu_(Yıllıklan.)": "Gelir Tablosu (Yıllıklan.)",
        "Nakit_Akış_(Yıllıklan.)": "Nakit Akış (Yıllıklan.)"
    }
    for file in csv_files:
        base = os.path.splitext(file)[0]
        if '_' not in base:
            continue
        # Split on the last underscore to separate stock name and sheet part
        stock, sheet_part = base.rsplit('_', 1)
        # Recover sheet name using sheet_map if available
        sheet_name = sheet_map.get(sheet_part, sheet_part)
        if stock not in stocks:
            stocks[stock] = {}
        stocks[stock][sheet_name] = file
    return stocks


def compute_ratios_for_stock(stock, sheets):
    """
    For a given stock, load the necessary sheets and compute financial ratios based on predefined mappings.
    Returns a dictionary of ratio names and their computed values.
    """
    data = {}
    # Load the three key sheets
    for sheet in ["Bilanço", "Gelir Tablosu (Yıllıklan.)", "Nakit Akış (Yıllıklan.)"]:
        if sheet in sheets:
            try:
                df = pd.read_csv(sheets[sheet])
                data[sheet] = df
            except Exception as e:
                print(f"Error loading sheet {sheet} for stock {stock}: {e}")
                data[sheet] = None
        else:
            data[sheet] = None

    ratios = {}

    # Use the Income Statement (Gelir Tablosu (Yıllıklan.)) for many ratios
    income_df = data.get("Gelir Tablosu (Yıllıklan.)")
    if income_df is not None:
        brut_kar = get_latest_value(income_df, "Brüt Kar (Zarar)")
        satis_gelir = get_latest_value(income_df, "Satış Gelirleri")
        ratios["Brüt Kar/Hasılat"] = brut_kar / satis_gelir if satis_gelir != 0 else np.nan

        genel_yonetim = get_latest_value(income_df, "Genel Yönetim Giderleri")
        ratios["Yönetim/Kar"] = genel_yonetim / brut_kar if brut_kar != 0 else np.nan

        pazarlama = get_latest_value(income_df, "Pazarlama, Satış ve Dağıtım Giderleri")
        ratios["Pazarlama/Kar"] = pazarlama / brut_kar if brut_kar != 0 else np.nan

        arge = get_latest_value(income_df, "Araştırma ve Geliştirme Giderleri")
        ratios["Arge/Kar"] = arge / brut_kar if brut_kar != 0 else np.nan

        amortisman = get_latest_value(income_df, "Amortisman")
        ratios["Amortisman/Kar"] = amortisman / brut_kar if brut_kar != 0 else np.nan

        donem_net = get_latest_value(income_df, "Dönem Net Kar/Zararı")
        ratios["Dönem Net/Brüt Kar"] = donem_net / brut_kar if brut_kar != 0 else np.nan
    
    # Dönem Net/Toplam Varlık uses Income for numerator and Balance Sheet (Bilanço) for denominator
    balance_df = data.get("Bilanço")
    if balance_df is not None and income_df is not None:
        toplam_varlik = get_latest_value(balance_df, "Toplam Varlıklar")
        donem_net = get_latest_value(income_df, "Dönem Net Kar/Zararı")
        ratios["Dönem Net/Toplam Varlık"] = donem_net / toplam_varlik if toplam_varlik != 0 else np.nan
    
    # Finansal Borç/Özkaynak from Balance Sheet
    if balance_df is not None:
        kisav = get_latest_value(balance_df, "Kısa Vadeli Yükümlülükler[- ]*Finansal Borçlar")
        uzunv = get_latest_value(balance_df, "Uzun Vadeli Yükümlülükler[- ]*Finansal Borçlar")
        ortaklik = get_latest_value(balance_df, "Ana Ortaklığa Ait Özkaynaklar")
        ratios["Finansal Borç/Özkaynak"] = (kisav + uzunv) / ortaklik if ortaklik != 0 else np.nan
    
    # Sermaye Harcaması/Dönem Net: Cash Flow numerator and Income denominator
    cash_df = data.get("Nakit Akış (Yıllıklan.)")
    if cash_df is not None and income_df is not None:
        yatirim_nakit = get_latest_value(cash_df, "Yatırım Faaliyetlerinden Kaynaklanan Nakit Akışları")
        donem_net = get_latest_value(income_df, "Dönem Net Kar/Zararı")
        ratios["Sermaye Harcaması/Dönem Net"] = yatirim_nakit / donem_net if donem_net != 0 else np.nan
    
    # Geçmiş Yıl Kar + Yedek Akçe from Balance Sheet
    if balance_df is not None:
        gecmis_yil = get_latest_value(balance_df, "Geçmiş Yıllar Kar/Zararları")
        yedek = get_latest_value(balance_df, "Kardan Ayrılan Kısıtlanmış Yedekler")
        ratios["Geçmiş Yıl Kar + Yedek Akçe"] = gecmis_yil + yedek
    
    # Hisse Başı Kazanç: Income numerator and Balance Sheet denominator
    if income_df is not None and balance_df is not None:
        donem_net = get_latest_value(income_df, "Dönem Net Kar/Zararı")
        odenmis_sermaye = get_latest_value(balance_df, "Ödenmiş Sermaye")
        ratios["Hisse Başı Kazanç"] = donem_net / odenmis_sermaye if odenmis_sermaye != 0 else np.nan
    
    # Hisse Başı Sermaye Harcaması: Cash Flow numerator and Balance Sheet denominator
    if cash_df is not None and balance_df is not None:
        yatirim_nakit = get_latest_value(cash_df, "Yatırım Faaliyetlerinden Kaynaklanan Nakit Akışları")
        odenmis_sermaye = get_latest_value(balance_df, "Ödenmiş Sermaye")
        ratios["Hisse Başı Sermaye Harcaması"] = yatirim_nakit / odenmis_sermaye if odenmis_sermaye != 0 else np.nan
    
    return ratios


def main():
    stocks = group_stock_csvs()
    if not stocks:
        print("No stock CSV files found.")
        return
    
    results = {}
    for stock, sheets in stocks.items():
        print(f"\nProcessing stock: {stock}")
        ratios = compute_ratios_for_stock(stock, sheets)
        results[stock] = ratios
        for ratio_name, value in ratios.items():
            print(f"  {ratio_name}: {value}")

if __name__ == "__main__":
    main()